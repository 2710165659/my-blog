import{_ as e,c as i,o,b1 as a}from"./chunks/framework.BSsnj4C9.js";const u=JSON.parse('{"title":"仓库操作","description":"","frontmatter":{"outline":1},"headers":[],"relativePath":"notes/git命令.md","filePath":"notes/git命令.md"}'),d={name:"notes/git命令.md"};function c(l,t,r,g,h,s){return o(),i("div",null,t[0]||(t[0]=[a('<h1 id="仓库操作" tabindex="-1">仓库操作 <a class="header-anchor" href="#仓库操作" aria-label="Permalink to &quot;仓库操作&quot;">​</a></h1><p><code>git init</code>用当前目录作为Git仓库 <code>git init newDir</code>在指定的目录下生成仓库 <code>git clone &lt;url&gt; [directory]</code> 从Git仓库拷贝项目</p><h1 id="git基本操作" tabindex="-1">Git基本操作 <a class="header-anchor" href="#git基本操作" aria-label="Permalink to &quot;Git基本操作&quot;">​</a></h1><h2 id="查看版本" tabindex="-1">查看版本 <a class="header-anchor" href="#查看版本" aria-label="Permalink to &quot;查看版本&quot;">​</a></h2><p><code>git -v</code></p><h2 id="git-config配置信息" tabindex="-1">git config配置信息 <a class="header-anchor" href="#git-config配置信息" aria-label="Permalink to &quot;git config配置信息&quot;">​</a></h2><ul><li><code>git config --global user.name &#39;你的用户名&#39;</code></li><li>`git config --global user.email &#39;你的邮箱&#39;</li></ul><h2 id="git-log查看日志" tabindex="-1">git log查看日志 <a class="header-anchor" href="#git-log查看日志" aria-label="Permalink to &quot;git log查看日志&quot;">​</a></h2><p><code>git log</code><code>git log --oneline</code> –oneline ：查看历史记录的简洁版本 –graph ：查看历史中什么时候出现了分支、合并 –reverse ：逆向显示所有日志 –author ：查找指定用户的提交日志 –since、–before、 --until、–after： 指定筛选日期 –no-merges ：选项以隐藏合并提交</p><h1 id="文件操作" tabindex="-1">文件操作 <a class="header-anchor" href="#文件操作" aria-label="Permalink to &quot;文件操作&quot;">​</a></h1><h2 id="git-add添加文件到缓存命令" tabindex="-1">git add添加文件到缓存命令 <a class="header-anchor" href="#git-add添加文件到缓存命令" aria-label="Permalink to &quot;git add添加文件到缓存命令&quot;">​</a></h2><ul><li><code>git add &lt;文件名&gt;</code>添加指定文件</li><li><code>git add .</code> 添加所有文件</li><li><code>git add *.java</code> 添加java文件</li></ul><h2 id="git-status查看文件的状态命令" tabindex="-1">git status查看文件的状态命令 <a class="header-anchor" href="#git-status查看文件的状态命令" aria-label="Permalink to &quot;git status查看文件的状态命令&quot;">​</a></h2><ul><li>添加暂存文件的命令：<code>git add &lt;文件名&gt;</code></li><li>放弃未暂存文件的修改命令：<code>git checkout – &lt;文件名&gt;</code></li><li>将被修改的文件暂存并提交的命令：<code>git commit -a</code></li></ul><h2 id="git-status-s-来查看简写的状态" tabindex="-1">git status -s 来查看简写的状态 <a class="header-anchor" href="#git-status-s-来查看简写的状态" aria-label="Permalink to &quot;git status -s 来查看简写的状态&quot;">​</a></h2><p>- M - 被修改  - A - 被添加  - D - 被删除  - R - 重命名  - ?? - 未被跟踪</p><h2 id="git-diff查看更新的详细信息命令" tabindex="-1">git diff查看更新的详细信息命令 <a class="header-anchor" href="#git-diff查看更新的详细信息命令" aria-label="Permalink to &quot;git diff查看更新的详细信息命令&quot;">​</a></h2><ul><li>尚未缓存的改动：<code>git diff</code></li><li>查看已缓存的改动： <code>git diff --cached</code></li><li>查看已缓存的与未缓存的所有改动：<code>git diff HEAD</code></li><li>显示摘要而非整个 diff：<code>git diff --stat</code></li></ul><h2 id="git-commit提交命令" tabindex="-1">git commit提交命令 <a class="header-anchor" href="#git-commit提交命令" aria-label="Permalink to &quot;git commit提交命令&quot;">​</a></h2><p>新增文件必须先add，修改文件可以-am省去add -m选项，以在命令行中提供提交注释，-a添加文件(省去add) <code>git commit -m &quot;第一次版本提交&quot;</code><code>git commit -am &quot;第一次版本提交&quot;</code></p><h2 id="git-reset-head取消缓存命令" tabindex="-1">git reset HEAD取消缓存命令 <a class="header-anchor" href="#git-reset-head取消缓存命令" aria-label="Permalink to &quot;git reset HEAD取消缓存命令&quot;">​</a></h2><p><code>git reset HEAD test.txt</code>用于取消已缓存的内容test.txt 简而言之，执行 git reset HEAD 以取消之前 git add 添加</p><h2 id="git-rm删除命令" tabindex="-1">git rm删除命令 <a class="header-anchor" href="#git-rm删除命令" aria-label="Permalink to &quot;git rm删除命令&quot;">​</a></h2><p>如果只是简单地从工作目录中手工删除文件，运行 git status 时就会在 Changes not staged for commit 的提示。要从 Git 中移除某个文件，就必须要从已跟踪文件清单中移除，然后提交。可以如下使用：</p><ul><li><code>git rm &lt;file&gt;</code> 如果删除之前修改过并且已经放到暂存区域的话，则必须要用强制删除选项 -f</li><li><code>git rm -f &lt;file&gt;</code> 如果把文件从暂存区域移除，但仍然希望保留在当前工作目录中，换句话说，仅是从跟踪清单中删除，使用 --cached 选项即可</li><li><code>git rm --cached &lt;file&gt;</code> 可以递归删除，即如果后面跟的是一个目录做为参数，则会递归删除整个目录中的所有子目录和文件：</li><li><code>git rm –r *</code></li></ul><h2 id="git-mv移动或重命名命令" tabindex="-1">git mv移动或重命名命令 <a class="header-anchor" href="#git-mv移动或重命名命令" aria-label="Permalink to &quot;git mv移动或重命名命令&quot;">​</a></h2><p><code>git mv test.txt newtest.txt</code> 移动或重命名一个文件、目录、软连接</p><h2 id="文件误删除" tabindex="-1">文件误删除 <a class="header-anchor" href="#文件误删除" aria-label="Permalink to &quot;文件误删除&quot;">​</a></h2><p><code>git restore &lt;文件名&gt;</code>从存储区恢复文件 <code>git reset --hard &lt;版本号&gt;</code>重置，从某次提交记录恢复（会丢失之后的提交） <code>git revert &lt;版本号&gt;</code>还原，还原到之前的提交（不会丢失之后的提交）</p><h1 id="分支操作" tabindex="-1">分支操作 <a class="header-anchor" href="#分支操作" aria-label="Permalink to &quot;分支操作&quot;">​</a></h1><p><code>git branch</code>查看分支 <code>git branch -v</code>查看分支及版本号 <code>git branch &lt;分支名&gt;</code>创建分支 <code>git checkout &lt;分支名&gt;</code>切换分支 <code>git checkout -b &lt;分支名|标签&gt;</code>创建并切换分支 <code>git branch -d &lt;分支名&gt;</code>删除分支 <code>git merge &lt;分支名&gt;</code>将任意分支合并到到当前分支中</p><h1 id="标签操作" tabindex="-1">标签操作 <a class="header-anchor" href="#标签操作" aria-label="Permalink to &quot;标签操作&quot;">​</a></h1><p><code>git tag</code>查看标签 <code>git tag 标签 版本号</code>添加标签 <code>git log 标签</code></p><h1 id="远程仓库" tabindex="-1">远程仓库 <a class="header-anchor" href="#远程仓库" aria-label="Permalink to &quot;远程仓库&quot;">​</a></h1><ul><li><strong>git remote add</strong>：添加远程仓库</li><li><strong>git remote</strong>：查看当前的远程仓库</li><li><strong>git fetch</strong>、<strong>git pull</strong>：提取远程仓仓库</li><li><strong>git push</strong>：推送到远程仓库</li><li><strong>git remote rm</strong>：删除远程仓库 <code>git remote add [alias] [url]</code>添加一个远程仓库 参数alias为别名,url为远程仓库的地址 <code>git remote</code>查看当前有哪些远程仓库 <code>git pull [options] [&lt;repository&gt; [&lt;refspec&gt;…]]</code><code>git remote rm &lt;别名&gt;</code>删除远程仓库</li></ul><ol><li>git fetch：相当于是从远程获取最新版本到本地，不会自动合并。</li><li>git pull：相当于是从远程获取最新版本并merge到本地。</li><li>git push：推送你的新分支与数据到某个远端仓库命令，格式<code>git push [alias] [branch]</code></li></ol><h1 id="远程仓库和本地的通信" tabindex="-1">远程仓库和本地的通信 <a class="header-anchor" href="#远程仓库和本地的通信" aria-label="Permalink to &quot;远程仓库和本地的通信&quot;">​</a></h1><p><code>git remote add 别名 [url]</code> 将本地仓库关联到远程仓库 <code>git push -u 别名 分支名</code> 上传分支到远程仓库，第一次上传分支需要加-u</p><p><code>git pull 别名 分支名</code>拉取分支到本地</p><p><code>git remote -v</code> 列出所有远程仓库及别名 <code>git remote rename origin myremote</code> 命令来重命名远程仓库别名。例如，如果你想将 <code>origin</code> 改为 <code>myremote</code></p><p><code>git merge &lt;分支名&gt;</code>将任意分支合并到到当前分支中</p><p><code>git push 远程仓库别名 --delete 分支名</code>从远程仓库删除分支</p><p>同步分支 <code>git fetch origin</code> 查看分支<code>git branch -r</code> 拉取分支<code>git checkout -b 本地分支名 origin/远程分支名</code></p><p><code>git pull --rebase</code>拉取其他文件相同提交上以本地为主</p><p><code>git rebase 分支1 分支2</code> 按照分支1commit 分支2commit顺序 <code>git branch 分支1 分支2</code>基于分支2创建分支1 -f表示强制创建</p>',45)]))}const m=e(d,[["render",c]]);export{u as __pageData,m as default};
